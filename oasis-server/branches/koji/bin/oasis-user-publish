#!/usr/bin/python

# =========================================================================== #
#                                                                             #
#   temporary file for development                                            #
#   when finished, it will become the new oasis CLI                           #
#                                                                             #
# =========================================================================== #

__version__ = "2.0.0"
__versionname__ = "Dakhla"

import getopt
import logging
import os
import sys
import time

from oasispackage.oasisAPI import oasisCLI
from oasispackage.flagfiles import FlagFile


"""
This is the CLI interface to OASIS package. 
It can be used to run the user part of OASIS, 
either directly from command line
or from another client, e.g. HTCondor.
"""

#
# FIXME
# this script is very similar to bin/oasisd
# should they be merged?
#


class Action(object):
    # FIXME: search for a less ugly name

    # FIXME: make a single Action class in a separate file
    #        and make all these little clients oasis-user-* 
    #        to import it and use it. 


    def __init__(self):

        self.oasis = oasisCLI()
        self.projectname = self.oasis.project.projectname

    def publish(self, block):
        '''
        runs the publishing, which will force internally running the probes

        block == True means process does retain prompt and waits in a loop 
        block == False means abort and message asking user to try again later 
        default is oasisCLI::block = False
        '''

        self.oasis.block = block

#        flag = FlagFile(self.projectname)
#        flag.create()
#        # this will create a flagfile in the regular place
#        # then the daemon will see it and finish
#        self.oasis._loop() # we wait until the daemon is done

        rc = self.oasis.publish()
        return rc


# =============================================================================
    
def usage():

    print 'oasis-user-publish:'
    print ''
    print ' Syntax:'
    print '     oasis-user-publish [--help|-h] [--block <value>]'
    print ''
    print ' Description:'
    print '     Transfer all files from the user scratch area'
    print '     to the destination area, and publish them.'
    print '     The behavior in case there is already another publishing'
    print '     process going on for a different project depends on the'
    print '     value of the input option "block".'
    print '     When block is TRUE, the process retains prompt and waits in a loop.'
    print '     This loop expires when the publishing can be done or when'
    print '     a timeout setup in the config files is reached.'
    print '     When block is FALSE, the process just aborts'
    print '     and a messages is displayed asking the user to try later'
    print ''
    print ' Options:'
    print '     --help | -h         Displays usage and exits'
    print '     --block <value>     value can be False/No/Off or True/Yes/On'
    print '                         case insensitive.'
    print '                         DEFAULT: False'
    print ''
    sys.exit()
    

def main(options):


    # defaults
    # FIXME: find better name instead of 'block'
    #        and fix its name in oasisCLI::__init__()
    block = False 
    #   block == True means process does retain prompt and waits in a loop
    #   block == False means abort and message asking user to try again later 
    
    opts, args = getopt.getopt(sys.argv[1:], 'h', ['help', 'block='])
    
    for k,v in opts:
        if k == '-h' or k == '--help':
            usage()
        if k == '--block':
            if v.lower() in ['false', 'no', 'off']:
                block = False
            elif v.lower() in ['true', 'yes', 'on']:
                block = True
            else:
                usage()
   
    # run the process 
    action = Action()
    rc = action.publish(block)
    return rc

if __name__ == '__main__':
    rc = main(sys.argv[1:])
    sys.exit(rc)

