#!/bin/bash

# Service-specific aufs osupdate postlude script
# Tom Lee <thomlee@iu.edu>
# Begun 2014-03-05
# Last modified 2015-02-17 by Dave Dykstra <dwd@fnal.gov>

# This is the first of its kind, an osupdate postlude script that will be run
# by the /opt/sbin/osupdate script if it is found in /opt/etc/osupdate.d and is
# executable.  Scripts such as this one perform any service-specific tasks that
# must take place after an osupdate.  It is very important that scripts like
# this one check first to see whether they need to do anything before they do
# anything.

# In this case, the kernel module for aufs must be rebuilt if there's
# been a kernel update.

PATH=/opt/sbin:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ARCH=x86_64

# If aufs is correctly installed for the kernel that is currently running, the
# package kernel-module-aufs-$(uname -r) should be found in the RPM database.
# Note that the kernel version is in the kernel-module-aufs package's *name*,
# not its version.

# First, see if there's been a kernel update since the last rebuild of aufs --
# this would be if the kernel version listed in the name of the installed
# kernel-module-aufs RPM and the most recent kernel RPM installed don't match.

# Most recent kernel (<version>-<release> format) by build time -- this will be
# the same as the output of uname -r if the kernel hasn't been updated since
# the last reboot
LATESTKERNEL=$(rpm -q --qf "%{BUILDTIME} %{VERSION}-%{RELEASE}\n" kernel | sort -n | tail -n 1 | cut -d ' ' -f 2)
if [[ $? -ne 0 ]]; then
    echo "Unable to locate most recently installed kernel -- can't test whether aufs needs rebuilding" >/dev/stderr
    exit 1
fi

# If the RPM kernel-module-aufs-$LATESTKERNEL is installed, we don't need to
# rebuild aufs now.
if rpm --quiet -q kernel-module-aufs-$LATESTKERNEL; then
    echo "kernel-module-aufs matches most recent kernel -- no need to rebuild" >/dev/stderr
    exit 0
fi

# If the previous test didn't exit the script, that means we need to rebuild
# aufs now.

# Check if the RPM source is installed under /usr/src/redhat
if [ ! -f /usr/src/redhat/SPECS/aufs.spec ]; then
    echo "aufs rpm source not found in /usr/src/redhat/SPECS/aufs.spec -- cannot rebuild" >/dev/stderr
    exit 1
fi

# We'll need these packages to rebuild the aufs RPMs.
NEEDEDRPMS=(gcc rpm-build kernel-devel kernel-headers)
# See which of them aren't already installed and install those.  This cuts down
# on "is already installed and at the latest version" messages from yum.
LACKINGRPMS=
for rpm in "${NEEDEDRPMS[@]}"; do
    if ! rpm --quiet -q $rpm; then
	LACKINGRPMS="$LACKINGRPMS $rpm"
    fi
done
if [[ -n $LACKINGRPMS ]]; then
    yum install -y -q $LACKINGRPMS
    if [[ $? -ne 0 ]]; then
	echo "Problem installing necessary packages with YUM -- unable to update aufs" >/dev/stderr
	exit 1
    fi
fi

# This isn't a standard part of the build tree, but I want to make the build
# quiet by placing a logfile in a findable location in case anyone really wants
# to read the compilation output.
mkdir -p -m0755 /usr/src/redhat/LOGS

# This gives something like '0.20090202.cvs':
AUFSVERSION=$(rpm -q --qf "%{VERSION}" aufs)
# This gives something like '6.sl5':
AUFSRELEASE=$(rpm -q --qf "%{RELEASE}" aufs)
# Due to an oddity in the way the SRPM is made, the release code of the RPM
# that actually gets created (e.g. "6") is not the same as the version of the
# SRPM (e.g. "6.sl5")!
AUFSCREATEDRELEASE=${AUFSRELEASE%%.*}

# Build the RPMs
pushd /usr/src/redhat/SPECS >/dev/null
rpmbuild -ba --quiet --target $ARCH --define "kernel $LATESTKERNEL" aufs.spec > /usr/src/redhat/LOGS/aufs-$AUFSVERSION-$LATESTKERNEL.log 2>&1
if [[ $? -ne 0 ]]; then
    echo "Problem building aufs RPMs -- unable to update aufs" >/dev/stderr
    exit 1
fi
popd >/dev/null

# Install the RPMs
# Their names will be:
# aufs-$AUFSVERSION-$AUFSCREATEDRELEASE.$ARCH.rpm
# kernel-module-aufs-$LATESTKERNEL-$AUFSVERSION-$AUFSCREATEDRELEASE.$ARCH.rpm
pushd /usr/src/redhat/RPMS/$ARCH >/dev/null
# There's a slight difficulty here -- if the kernel module has already been
# built, we won't be here, but the problem lies in the aufs RPM.  It will
# typically have the same version/release as the existing one that's already
# installed, so the -i and -U methods will complain.  However, it's possible
# that it won't already be installed (if no previous kernel module RPMs are
# installed either), so in that case the -F method will complain.  It can't be
# neatly removed and then reinstalled, because the kernel module RPM depends on
# it.  So the best way to do this is probably to erase the existing aufs RPM
# with --nodeps, then install both new RPMs immediately after.
rpm --quiet -e --nodeps aufs >&/dev/null
rpm --quiet -i kernel-module-aufs-$LATESTKERNEL-$AUFSVERSION-$AUFSCREATEDRELEASE.$ARCH.rpm aufs-$AUFSVERSION-$AUFSCREATEDRELEASE.$ARCH.rpm
if [[ $? -ne 0 ]]; then
    echo "Problem installing rebuilt aufs RPMs" >/dev/stderr
    exit 1
fi
# Delete the RPMs
rm -f kernel-module-aufs-*.rpm aufs-*.rpm
popd >/dev/null

# Uninstall any kernel-module-aufs RPMs that pertain to kernel versions that
# aren't installed

INSTALLEDKERNELS=($(rpm -q --qf "%{VERSION}-%{RELEASE}\n" kernel))
if [[ $? -ne 0 ]]; then
    echo "Problem determining which kernels are installed -- unable to clean up unnecessary aufs versions" >/dev/stderr
    exit 1
fi

INSTALLEDAUFSES=($(rpm -qa | grep '^kernel-module-aufs-'))
for aufs in "${INSTALLEDAUFSES[@]}"; do
    aufsversion=${aufs#kernel-module-aufs-}
    found=0
    for kernel in "${INSTALLEDKERNELS[@]}"; do
	if [[ ${aufsversion#$kernel} != $aufsversion ]]; then
	    found=1
	    break
	fi
    done
    if [[ $found -eq 0 ]]; then
	# We found a kernel-module-aufs RPM without a corresponding kernel --
	# delete it
	rpm --quiet -e $aufs
    fi
done
