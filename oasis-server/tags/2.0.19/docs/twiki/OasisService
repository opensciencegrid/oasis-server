---+!! *OSG Application Software Installation Service (OASIS)*
This document is a draft, not intended to be used as documentation or guidelines yet.

%DOC_STATUS_TABLE%
%TOC{depth="4"}%

---++ Description: what is OASIS and what it is for?
In order to effectively use the Open Science Grid (OSG) user jobs often require software that is too large or complicated to be sent along with the job. OASIS (OSG Application Software Installation Service) is a system that allows Virtual Organizations to install their software once, centrally, and have it visible and usable, via a distributed filesystem, from any OSG worker node.

OASIS is a service for those VOs that need to distribute their application software to the OSG sites prior to launch their jobs.

Those VOs that attach their application code with every job sent to the grid, or those VOs whose jobs download it from a web URL every time, and want to keep doing things that way, don't need OASIS.

For the rest of VOs, whose jobs expect to find the scientific application code to be already installed on all the nodes in the grid, OASIS is intended to facilitate the process.
Those VOs, so far, have been distributing these scientific application codes by sending installation jobs to every site in the grid, or at least to every site they wanted to use. These installation jobs installed the code under directory $OSG_APP/{vo_name}

OASIS allows to reproduce this mechanism, with the difference that only one installation job is needed, and the application code will be distributed automatically to all sites in OSG in a transparent way.
Once the new application code is installed at the OASIS server and it is automatically distributed to all sites, the VO jobs will find it under directory /cvmfs/oasis.opensciencegrid.org/{vo_name} on every node in OSG. 
There is an implicit requirement to make that possible: all sites must run the CVMFS client on their WNs. 
For those sites not running CVMFS client, or not properly configured, OASIS is no help, and the scientific application code must be installed site by site in the old-fashion way.  


---++ How to use OASIS?

---+++ How to use OASIS

---++++ How to update content 

Instructions on how to update VO content using current OASIS 1 service are here: [[UpdateOasis][update VO content with OASIS 1]]
When OASIS 2 is available, VOs will also have the option of submitting the installation jobs via regular condor-g jobs, the same way it has been done in the past (when installation jobs were submitted site by site).  

Sometimes the actual PATH where the new content is built is relevant. For example, when the application software includes non-relocatable paths.
In those case, the application software cannot be built on the OASIS server machine. The reason for that is because the final path will look similar to  /cvmfs/oasis.opensciencegrid.org/{vo_name} but that directory will not be at the OASIS server host. 
In this case, the solution is to build the new VO content on a separate host at your home institution. After that, the task to be run at the OASIS server (either by interactive gsissh login or via a condor-g job) would just download the new content already built from some URL, unpack it, and let OASIS to distribute it.

---++++ How to reach the content at the client

At the WN client, the VO software distributed via OASIS will show up under directory /cvmfs/oasis.opensciencegrid.org/{vo_name}, assuming the sites is running CVMFS client on the WNs.
However, users should not expect the environment variable $OSG_APP to point to that directory. That most probably will not happen. Indeed, it is possible that the variable $OSG_APP actually exists, but points to a different location. 
Therefore, the VO jobs should check by themselves if the CVMFS directory exists. If it does, then use it, otherwise, use directory pointed by $OSG_APP. 


---+++ Join OASIS

---++++ Joining Oasis as a Service (!OS)

*Every VO in OSG is allowed and welcome to use the central OASIS service provided at the GOC*, or !OS, no matter the size of the content that VO wants to distribute, or how frequently new content is added.
The only limitations are those imposed by the underlying technology, !CvmFS, as they are explained below.
Instructions on how to update VO content using current OASIS 1 service are here: [[UpdateOasis][update VO content with OASIS 1]]

One important advantage of using the centralized OASIS service at the GOC is the guaranteed quality of the service provided to the user community, as it is describe in the [[https://twiki.grid.iu.edu/bin/view/Operations/OASISServiceLevelAgreement][Service Level Agreement document]].

---++++ Joining Oasis as a Network (!ON)

Even the central service is intended to satisfy all users need, sites deploying and maintaining their own repositories will be accepted.
Instructions on how to add your home based repository to the OASIS Network are [[OasisExternalRepositories][here]]

For protection in the case of non proper content is distributed from an external repository, an [[OasisExternalRepositories#Emergency_procedure_to_blank_an][emergency procedure]] has been designed to blank the content of that repository.

---++ Architecture
OASIS consists of several components, along with specified procedures and practices, which together deliver the service. OASIS is currently built on !CvmFS, a global distributed filesystem which provides secure, cacheable content served over HTTP. CVMFS handles the task of allowing content to be distributed, but it lacks the surrounding infrastructure to manage content installation and delivery safely, securely, and reliably. 
As OASIS is built on !CvmFS, it follows its multi-tier architecture. The components of that architecture are: 
 
   * Repository (Stratum 0): a standard CVMFS deployment includes a 'repository server' which contains the content and converts it to the format published globally. CVMFS provides simple tools for publishing content after it is added. This is the area where OASIS most provides value beyond basic CVMFS.  The centralized repository service provided by OSG is hosted at the GOC. 

   * Replica (Stratum 1): a web server which exports published content, and is essentially Apache with an optional cache. OASIS adds utilities to manage exported content on a VO basis, providing the ability to block content that may be found to be invalid. There are current 3 replica hosts part of OASIS infrastructure: GOC, BNL and FNAL.  

   * Client: !CvmFS makes content appear to be local to the worker node filesystem via a fuse-based client. OASIS adds configuration information pointing the client at the appropriate OSG distribution layer. It also may optionally include additional configuration mechanisms. Instructions to install the !CvmFS client together with OASIS-specific configuration are [[InstallCvmfs][here]]


Overall the purpose of OASIS is to 'productize' the !CvmFS distributed filesystem to make it easy, safe, deployable, manageable, and secure.


To better understand the description of the service and the multiple possibilities, it is good to consolidate some nomenclature:

| * OASIS as a Service (!OS) * | it is the central OASIS service provided by GOC. One or more CVMFS  stratum-0s, stratum-1s, repositories... It can be generalized, and consider that any site running the same service at home can be called one !OS, being therefore the one at GOC just the central one.  | 
| * OASIS as a Repository (!OR) * | it is the actual CVMFS repo /cvmfs/oasis.opensciencegrid.org/  | 
| * OASIS as a Product (!OP) * | it is the actual code distributed via RPM that can be deployed by any one on top of their CVMFS service, including GOC. | 
| * OASIS as a Network (!ON) * | the set of CVMFS severs (and replicas) being somehow connected to this  project. Either because their keys are being signed by our keys, because we distribute the keys with a CVMFS repo served by !OS, because we replicate the content of external servers and add their content to the repos in the central !OS, etc. | 

---+++ Versions

| * Version * | * Status * |
| * OASIS 1 * | Production |
| * OASIS 2.0.0 (Dakhla) * | Development, ready for testing on ITB |
| * OASIS 2.1.0 (Tafilalt) * | Under design |

---++++ OASIS 1

Current version of the service provides direct GSISSH login as mechanism for authenticating and authorizing write access to the server in order to place and publish content.
Procedure to update content with the current service are described in section [[OasisService#Joining_Oasis_as_a_Service_OS][Joining OASIS as a Service]]

---++++ OASIS 2

OASIS 2.0.0, besides direct GSISSH access, also provides for a job-oriented interface, controlled by user membership and roles in VOMS. In other words, users have the possibility of submitting their installation tasks as condor-g jobs to a dedicated gatekeeper, without the need to login via ssh. Depending on the interface used, OASIS provides additional feedback to users and more informative logging for repository administrators. This is useful for troubleshooting and accounting. OASIS also encapsulates user actions to minimize the chance of accidental damage to new or existing content by aborting the publication process when errors occur.  

OASIS 2.x.y allows VOs and repository administrators to define and run arbitrary actions on content before publication, again providing feedback and logging. These probes can either validate the content however needed, or optionally take action on the content (e.g. adding nested catalogs, or deleting .svn directories).   Examples of probes:

| * Probe * | * Scope * | *Description* |
| * Overquota * | OASIS | Ensures the VO does not use more space than allowed |
| * !FileSize * | OASIS, VO | Ensures every new file is neither smaller than a minsize nor larger than a maxsize |
| * !NoDeletion * | VO | Guarantees that no previous file has been deleted |
| * !NoReWrite * | VO | Guarantees that no previous file has been modified |
| * !NoTarball * | OASIS | Prevents from a tarball file being distributed |
| * !NoSVN * | OASIS | Prevents from hidden .svn directories being distributed |
| * !CatalogSize * | OASIS | Checks the total number of files and the size of the resulting !CvmFS catalog. If needed, it can take corrective actions such as forcing the splitting of the catalog into several subcatalogs |
| * !FilePermissions * | OASIS | Ensures all files have proper read permissions |

Besides the set of probes provided to OASIS, VOs are allowed to use their own custom ones. VOs only need to express their desire to the OASIS team. If a security auditing does not detect any problem, the code will be included as part of the service.  

OASIS 2.x.y provides a suite of administrative utilities to facilitate services maintenance. These tools not only help to prevent from human mistakes, but also perform full logging for troubleshooting and diagnosis.  
Potential examples of these tools are 

| * oasis-admin-addproject * | adds a new repository, together will all system requirements (UNIX accounts, directories...) |
| * oasis-admin-delproject * | to remove a repository |
| * oasis-admin-list * | returns the entire list of repositories at the server |
| * oasis-admin-rollback * | to rollback of content after publication on a VO-by-VO basis |
| * oasis-admin-resignwhitelist * | to re-sign the whilelist file that prevents !CvmFS repository from expiring |
| * oasis-admin-keysign * | to handle the key signing necessary for external repositories to join !ON |
 
Starting with version 2.0.0, OASIS is also distributed as an RPM by OSG. This will allow sites and VOs to deploy it on top on their local !CvmFS infrastructures and get advantage of the extra functionalities. 

Finally, OASIS 2.x.y has a plug-in based design, which will allow other technologies to replace !CvmFS in a very easy way. Or even to work with more than one file distribution technology at the same time.



---++ Guidelines

There are no currently specific limitations or guidelines on how to distribute content on OASIS, other than those required by !CvmFS itself, as they can be read [[http://cernvm.cern.ch/portal/filesystem/repository-limits][here]].
Users are encouraged to follow those guidelines, for their own protection and to guarantee the performance level of the system.

---++ References

   1. J Caballero et al.; "OASIS: a data and software distribution service for Open Science Grid" CHEP 2013 [[http://indico.cern.ch/getFile.py/access?contribId=277&sessionId=4&resId=0&materialId=slides&confId=214784][slides]] <!--[[http://indico.cern.ch/contributionDisplay.py?contribId=277&sessionId=4&confId=214784][contribution]] -->[[http://www.usatlas.bnl.gov/~caballer/files/oasis/chep2013_proceeding.pdf][proceedings]]
   1. [[http://cernvm.cern.ch/portal/sites/cernvm.cern.ch/files/cvmfstech-2.1-4.pdf][CVMFS technical report]]
   1. J Blomer et al.; "CernVM-FS: delivering scientific software to globally distributed computing resources"; Proceedings of the first international workshop on Network-aware data management

<!--   1. [[http://www.usatlas.bnl.gov/~caballer/files/oasis/oasis.pdf][Proposal for OSG Application Software Installation Service (OASIS)]]  -->

---++ Contact

| * OASIS Manager * | [[https://oim.grid.iu.edu/oim/contact?id=8][Brian Bockelman]]|
| * OASIS Coordinator * | [[https://oim.grid.iu.edu/oim/contact?id=649][Jose Caballero]]|


<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = JoseCaballero

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = General

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = Documenter

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Knowledge
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = 
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->

-- Main.JoseCaballero - 15 May 2014

