#!/bin/env python

        # TO BE IMPLEMENTED #


import getopt
import logging
import sys
import time

"""
OASIS admin tool to add a new project to the server
Steps:

    -- create an UNIX ID

    -- if needed, add the UNIX ID to a dedicated OASIS group (for example the group included in sudoers)

    -- Maybe, create an empty user scratch are for that UNIX ID.

    -- create a CVMFS repo

    -- if possible, creates a template for oasisprojects.conf

Everything being done is logged to  /var/log/oasis/oasis.log
"""


class addproject(object):
    # In the future, if makes sense, 
    # it could be inherited 
    # from an Interface class generic
    # for all oasis-admin- tools
    # For example, setting the logger is going to be the same
    # for all admin tools...
    # QUESTION: ?? where the base class would be placed ?? underneath site-packages/ ??


    def __init__(self, options):
        '''    
        options are the input options from the command line, as result of argv[1:]
        '''    


        self.options = options

        self._setuploggin()
        self._parseoptions()


    def _parseoptions(self):
        '''    
        options can be
            --user <username> MANDATORY
            --project <projectname> MANDATORY
            --disttool <tool for file distribution>  MANDATORY ?  example: cvmfs
            --loglevel <log level> DEFAULT=DEBUG  
            --conffile <path to config file oasisprojects.conf> OPTIONAL can be used to double check if user/project already setup
            --force
        '''    


    def _setuploggin(self):

        
        self.log = logging.getLogger('admin-addproject')
 
        # set the messages format
        if major == 2 and minor == 4:
            LOGFILE_FORMAT='%(asctime)s (UTC) - OASIS [ %(levelname)s ] %(name)s %(filename)s:%(lineno)d : %(message)s'
        else:
            LOGFILE_FORMAT='%(asctime)s (UTC) - OASIS [ %(levelname)s ] %(name)s %(filename)s:%(lineno)d %(funcName)s(): %(message)s'
        logfile_formatter = logging.Formatter(LOGFILE_FORMAT)
        logfile_formatter.converter = time.gmtime  # to convert timestamps to UTC
 
        logStream = logging.FileHandler('/var/log/oasis/oasis.log')
        logStream.setFormatter(logfile_formatter)
        self.log.addHandler(logStream)
        self.log.setLevel(self.loglevel)



    def run(self):
        '''
        main method performing all checks, running commands, etc.
        '''



    def _checkuser(self):
        '''
        checks if that username already exists
        '''

    def _checkproject(self)
        '''
        checks if that project already exists
        '''

    def adduser(self):
        '''
        creates the UNIX ID
        '''

    def createrepo(self):
        '''
        creates a directory in the destination space. 
        For example, a new repo in CVMFS
        '''

        # FIXME
        # at this step, if it is the first repo being created, 
        # the file /srv/cvmfs/.cvmfs_master_replica  has to be created

    

if __name__ == '__main__':

    obj = addproject(sys.argv[1:])
    obj.run()









# ============================================================================
#       version in bash  
# ============================================================================

#       #!/bin/bash
#       # Add a repository to the OSG cvmfs distribution.
#       # Run this on the stratum 0 (oasis) first, then after the repository has
#       #  started reading the signed .cvmfswhitelist from the stratum 0, run
#       #  this also on the stratum 1 (oasis-replica).
#       
#       ME="`basename $0`"
#       MYDIR="`dirname $0`"
#       STRATUM0=oasis.opensciencegrid.org
#       
#       usage()
#       {
#           echo "Usage: $ME http_url_of_repo_server" >&2
#           exit 1
#       }
#       
#       if [ $# != 1 ]; then
#           usage
#       fi
#       
#       case "$1" in
#           http://*)
#       	;;
#           *)
#       	usage
#       	;;
#       esac
#       
#       TMPFILE="/tmp/addosgrepo$$"
#       trap "rm -f ${TMPFILE}" 0
#       if ! wget -qO$TMPFILE "$1/.cvmfswhitelist"; then
#           echo "$ME: unable to wget $1/.cvmfswhitelist" >&2
#           exit 1
#       fi
#       REPONAME="`cat -v $TMPFILE|sed -n 's/^N//p'`"
#       
#       set -e
#       
#       MASTERKEY=/etc/cvmfs/keys/$STRATUM0.masterkey
#       if [ -f $MASTERKEY ]; then
#           # on stratum 0
#           case "$REPONAME" in
#       	"") echo "$ME: no repository name found in $1/.cvmfswhitelist" >&2
#       	    exit 1
#       	    ;;
#       	*.opensciencegrid.org)
#       	    ;;
#       	*)  echo "$ME: repository $REPONAME not in opensciencegrid.org" >&2
#       	    exit 1
#       	    ;;
#           esac
#           CATDIR="/srv/cvmfs/$REPONAME/pub/catalogs"
#           su cvmfs -c "mkdir -p $CATDIR && cp $TMPFILE $CATDIR/.cvmfswhitelist"
#           $MYDIR/resign_osg_whitelist "$REPONAME"
#       else
#           # on stratum 1
#           cvmfs_server add-replica -o root $1 /etc/cvmfs/keys/opensciencegrid.org.pub
#           rm -f /etc/httpd/conf.d/cvmfs.$REPONAME.conf
#           # make this also look like a master because other stratum 1s
#           #   may read from it
#           touch /srv/cvmfs/$REPONAME/.cvmfs_master_replica
#           # pull initial snapshot
#           cvmfs_server snapshot $REPONAME
#       fi
#       
