#!/bin/env python

import commands
import getopt
import logging
import os
import sys
import time
import pwd

"""
OASIS admin tool to add a new project to the server
Steps:

    -- create an UNIX ID

    -- if needed, add the UNIX ID to a dedicated OASIS group (for example the group included in sudoers)

    -- Maybe, create an empty user scratch are for that UNIX ID.

    -- create a CVMFS repo

    -- if possible, creates a template for oasisprojects.conf  ????

Everything being done is logged to  /var/log/oasis/oasis.log

The username and the name of the repo 
are read from the oasisprojects.conf configuration file
So it must be written before calling this tool
(maybe unless I pass the arguments from command line)

"""

# FIXME write an usage() function


# FIXME should this type of tools executable only by root??


class addproject(object):
    # In the future, if makes sense, 
    # it could be inherited 
    # from an Interface class generic
    # for all oasis-admin- tools
    # For example, setting the logger is going to be the same
    # for all admin tools...
    # QUESTION: ?? where the base class would be placed ?? underneath site-packages/ ??


    def __init__(self, projectname):

        self._setuplogging()
        # do we still need to setup logging if I get a Project class?

        # create an object Project(), 
        # which includes an attribute self.distributionplugin

        from oasispackage.oasisAPI import Project, ProjectFactory
        
        oasisconf = '/etc/oasis/oasis.conf'
        
        projectfactory = ProjectFactory(oasisconf, projectname=projectname)
        self.project = projectfactory.getProject()


    def _setuplogging(self):
        
        self.log = logging.getLogger('admin-addproject')
 
        # set the messages format
        if major == 2 and minor == 4:
            LOGFILE_FORMAT='%(asctime)s (UTC) - OASIS [ %(levelname)s ] %(name)s %(filename)s:%(lineno)d : %(message)s'
        else:
            LOGFILE_FORMAT='%(asctime)s (UTC) - OASIS [ %(levelname)s ] %(name)s %(filename)s:%(lineno)d %(funcName)s(): %(message)s'
        logfile_formatter = logging.Formatter(LOGFILE_FORMAT)
        logfile_formatter.converter = time.gmtime  # to convert timestamps to UTC
 
        logStream = logging.FileHandler('/var/log/oasis/oasis.log')
        logStream.setFormatter(logfile_formatter)
        self.log.addHandler(logStream)
        self.log.setLevel(self.loglevel)



    def run(self):
        '''
        main method performing all checks, running commands, etc.
        '''

        self.adduser()
        self.createsrcdir()
        self.createrepository()


    def adduser(self):
        '''
        creates the UNIX ID
        '''

        uid = self._checkuser()
        if not uid:
            user = self.project.username
            group = self.project.username  # maybe in the future is a generic group name like 'oasis'?
   
            cmd = '/usr/bin/adduser -m %s' %user
            rc, out = commands.getstatusoutput(cmd)

    def _checkuser(self):
        '''
        checks if that username already exists
        '''
        # FIXME is this really needed?

        user = self.project.username
        try:
            pw = pwd.getpwnam(user)
            return pw.pw_uid 
        except:
            return None


    def createsrcdir(self):
        '''
        creates the source directory
        '''

        user = self.project.username
        uid = pwd.getpwnam(user).pw_uid
        
        srcdir = self.project.srcdir
        
        if not os.path.isdir(srcdir):
            os.makedirs(srcdir)
            os.fchown(srcdir, uid , uid)


    def createrepository(self):
        '''
        uses the distribution plugin included in the Project() object,
        and calls the method createrepository() 
        '''

        # FIXME
        # at this step, if it is the first repo being created, 
        # the file /srv/cvmfs/.cvmfs_master_replica  has to be created
    
        self.project.distributionplugin.createrepository()

    

def main(options):

    # parse input options
    opts, args = getopt.getopt(options, 
                               '', 
                               ['project='])

    project = None
    for o,a in opts:
        if o == '--project':
            project = a

    # run the processes
    obj = addproject(project)
    obj.run()


if __name__ == '__main__':
    main(sys.argv[1:])
