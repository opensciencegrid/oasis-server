#!/usr/bin/python

# =========================================================================== #
#                                                                             #
#   temporary file for development                                            #
#   when finished, it will become the new oasis CLI                           #
#                                                                             #
# =========================================================================== #

import getopt
import os
import sys
import time

from oasispackage.oasisAPI import oasisCLI, FlagFile


"""
This is the CLI interface to OASIS package. 
It can be used to run the user part of OASIS, 
either directly from command line
or from another client, e.g. HTCondor.
"""
#
# FIXME
# this script is very similar to bin/oasisd
# should they be merged?
#


class Action(object):
    # FIXME: search for a less ugly name

    def __init__(self):

        # FIXME !! figure out how to pass the path to oasis.conf as a variable instead of hardcoded
        # set the path to config file oasis.conf
        self.conffile = '/etc/oasis/oasis.conf'

        self.oasis = oasisCLI(self.conffile)
        self.projectname = self.oasis.project.projectname

    def run(self, args):
        '''
        runs all steps: payload, probes and publishing.

        args are the user payload and inputs options, as a python list.
        For example, when invoked by condor, it looks like this:
    
                ['/var/lib/condor/execute/dir_15018/condor_exec.exe', 'a', 'b', 'c', '1', '2', '3'] 
        '''
    
        # run
        rc = self.oasis.run(args)
        # FIXME!!
        # maybe it is not a good idea to pass that type of args, 
        # because they have equals '=' and those stuffs.
        # perhaps the parsing should be done in the __main__ section
        # and pass to the class a nice result
        return rc


    def runprobes(self):
        '''
        only run the probes
        '''

        flag = FlagFile(self.projectname)
        
        # we force the creation of the flagfile in a random directory underneath /tmp/
        # just in case the daemon is also running.
        # This flag file is hidden to the daemon, so it is not going to trigger
        # running probes and publishing in parallel
        import tempfile
        flag.basedir = tempfile.mkdtemp(dir='/tmp/')
        flag.create()
        self.oasis.project.flagfile = flag
        
        rc = self.oasis.project.runprobes()
        # FIXME
        # to make this work I had to modify runprobes()
        # If user is root, calls the probes with sudo
        # If user is regular user (the one running this script), calls the probes normally
        
        # now delete the flagfile and the random directory
        os.remove(flag.flagfile)
        os.rmdir(flag.basedir)
        
        return rc
        

    def publish(self):
        '''
        runs the publishing, which will force internally running the probes
        '''

        flag = FlagFile(self.projectname)
        flag.create()
        # this will create a flagfile in the regular place
        # then the daemon will see it and finish
        self.oasis._loop() # we wait until the daemon is done
        
        return rc


# =============================================================================
    

if __name__ == '__main__':

    # parsing the input options
    opts, args = getopt.getopt(sys.argv[1:],
                               '',
                               ['runprobes', 'publish'])
                               # FIXME: add input options for log level (INFO, DEBUG...), for confffile, ...

    mode = 'deploy' # default
    for o, a in opts:
        if o == '--runprobes':
            mode = 'runprobes' 
        if o == '--publish':
            mode = 'publish' 

    action = Action()

    if mode == 'deploy':
        rc = action.run(args)
    if mode == 'runprobes':
        rc = action.runprobes()
    if mode == 'publish':
        rc = action.publish()

    sys.exit(rc)
